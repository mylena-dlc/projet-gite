{% extends 'base.html.twig' %}

{% block title %}Réservation à Orbey | Séjournez dans notre gîte en Alsace{% endblock %}
{% block meta_description %}{{ description }}{% endblock %}

{% block body %}
	{% include "_partials/_header.html.twig" %}

	<div class="p-4 my-6 lg:p-12">
		{{ knp_menu_render(breadcrumb, {'template': 'menu/breadcrumb.html.twig'}) }}

		<h1 class="mb-4 mt-2">Réservation</h1>    
		<h3 class="font-bold">Quand voulez-vous voyager ?</h3>
	</div>

	<div class="lg:flex px-4 lg:px-12">
		<div class="w-full lg:w-1/2 lg:border-r lg:border-gray-300 lg:pr-10">
			<form method="POST" action="{{ path('app_reservation') }}">
				<input type="hidden" id="startDate" name="startDate" readonly>
				<input type="hidden" id="endDate" name="endDate" readonly>

				<div id="calendar" class="w-auto mx-auto p-4 lg:p-0 lg:h-[600px]"></div>

				<div class="flex flex-col justify-around lg:items-start w-full mb-2 lg:my-4 px-4">
					<div class="flex items-center mb-2">                
						<div class="bg-gray2 w-[30px] h-[15px] rounded-md mr-2" aria-label="Dates non disponibles"></div> 
						<p class="italic text-sm">Dates non disponibles</p>
					</div>
					<div class="flex items-center mb-2">
						<div class="bg-transparent w-[30px] h-[15px] rounded-md mr-2 border border-gray-500" aria-label="Dates disponibles"></div> 
						<p class="italic text-sm">Dates disponibles</p>
					</div>
					<p id="resetButton" class="text-center underline hover:cursor-pointer py-1 text-sm">Effacer les dates</p>
				</div>
		</div>

		<!-- Colonne droite : formulaire -->
		<div class="w-full lg:w-1/2 lg:pl-10 mt-6 lg:mt-0">
			<div id="message" class="text-center italic bg-slate-100 border-l-4 border-slate-500 text-tarracota1 p-3 rounded-md shadow-md empty:hidden">
				<i class="fa-solid fa-circle-info"></i> Sélectionnez la date d'arrivée
			</div>

			<h3 class="font-bold my-4">Dates</h3>
			<p id="selectedDates" class="bg-white1 rounded-lg w-3/4 p-2">Aucune date sélectionnée</p> 

			<h3 class="font-bold my-4">Combien de personnes ?</h3>
			<div class="flex justify-around gap-4">
				<div class="w-1/2">
					<label for="numberAdult">Adulte(s)</label>
					<input type="number" id="numberAdult" name="numberAdult" min="1" max="4" value="1" required>
				</div>
				<div class="w-1/2">
					<label for="numberKid">Enfant(s)</label>
					<input type="number" id="numberKid" name="numberKid" max="3" min="0">
				</div>
			</div> 

			<button type="submit" class="btn-primary mt-4">Réserver</button>
			</form>
		</div>
	</div>

	<!-- Modale d’erreur -->
	<div id="errorModal" class="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center hidden z-50">
		<div class="bg-white1 p-6 rounded-lg shadow-lg w-2/3 lg:w-1/3">
			<h2 class="text-xl font-semibold"><i class="fa-solid fa-circle-exclamation"></i> Erreur</h2>
			<p id="modalMessage" class="mt-2"></p>
			<button id="closeModal" class="mt-4 px-4 py-2 btn-secondary w-auto">Fermer</button>
		</div>
	</div>

	{% include "_partials/_footer.html.twig" %}

	{% block custom_javascripts %}
	<script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/index.global.min.js"></script>

	<script>
		const reservedDates = {{ reservedDates|raw }};
		document.addEventListener('DOMContentLoaded', () => {
			const resetButton = document.getElementById('resetButton');
			const calendarEl = document.getElementById('calendar');
			const selectedDatesEl = document.getElementById('selectedDates');
			const startDateInput = document.getElementById('startDate');
			const endDateInput = document.getElementById('endDate');
			const messageEl = document.getElementById('message'); 

			let startDateSelected = null;
			let endDateSelected = null;
			let isStartDateSelected = false;
			const minNights = 2;

			const calendar = new FullCalendar.Calendar(calendarEl, {
				initialView: 'dayGridMonth',
				locale: 'fr',
				height: '530px',
				selectable: true,
				selectMirror: true,
				headerToolbar: {
					right: 'prev,next'
				},
				events: reservedDates, 
				validRange: {
					start: new Date().toISOString()
				},
				select: function (info) {
					const selectedDate = new Date(info.startStr);
					const isReserved = reservedDates.some(event => {
						const reservedStart = new Date(event.start);
						const reservedEnd = new Date(event.end);
						return selectedDate >= reservedStart && selectedDate < reservedEnd;
					});

					if (isReserved) {
						showModal('Cette date est déjà réservée.');
						resetSelection();
						return;
					}

					if (!isStartDateSelected) {
						startDateSelected = selectedDate;
						startDateInput.value = selectedDate.toLocaleDateString('fr-FR');
						selectedDatesEl.textContent = `Date d'arrivée: ${startDateInput.value}`;
						messageEl.textContent = "Sélectionnez la date de départ (minimum 2 nuits).";
						isStartDateSelected = true;

						calendar.addEvent({
							id: 'highlight',
							start: info.startStr,
							end: info.startStr,
							display: 'background',
							backgroundColor: '#a9b4a4',
							classNames: ['fc-highlight']
						});
					} else {
						endDateSelected = selectedDate;

						if (endDateSelected < startDateSelected) {
							showModal("La date de départ ne peut pas être antérieure à la date d'arrivée.");
							resetSelection(); 
							return;
						}

						const hasReservedDates = reservedDates.some(event => {
							const reservedStart = new Date(event.start);
							const reservedEnd = new Date(event.end);
							return (startDateSelected < reservedEnd && endDateSelected > reservedStart);
						});

						if (hasReservedDates) {
							showModal("Votre sélection inclut des dates déjà réservées. Veuillez choisir une autre période.");
							resetSelection();
							return;
						}

						const diffTime = Math.abs(endDateSelected - startDateSelected);
						const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
						if (diffDays < minNights) {
							showModal(`La durée minimale de séjour est de ${minNights} nuit(s).`);
							resetSelection();
							return;
						}

						endDateInput.value = endDateSelected.toLocaleDateString('fr-FR');
						selectedDatesEl.textContent = `Date d'arrivée: ${startDateInput.value} - Date de départ: ${endDateInput.value}`;
						messageEl.textContent = "";

						calendar.getEventById('highlight')?.remove();
						calendar.addEvent({
							id: 'highlight',
							start: startDateSelected.toISOString().split('T')[0], 
							end: endDateSelected.toISOString().split('T')[0], 
							display: 'background',
							backgroundColor: '#e6f3e0',
							classNames: ['fc-highlight']
						});
					}
				},
			});

			function resetSelection() {
				startDateInput.value = '';
				endDateInput.value = '';
				selectedDatesEl.textContent = 'Aucune date sélectionnée';
				messageEl.textContent = "Sélectionnez la date d'arrivée";
				calendar.getEventById('highlight')?.remove();
				calendar.render();
				startDateSelected = null;
				endDateSelected = null;
				isStartDateSelected = false;
			}

			resetButton.addEventListener('click', resetSelection);
			calendar.render();

			const numberAdult = document.getElementById('numberAdult');
			const numberKid = document.getElementById('numberKid');

			const validateTotal = () => {
				const adultCount = parseInt(numberAdult.value, 10) || 0;
				const kidCount = parseInt(numberKid.value, 10) || 0;
				const total = adultCount + kidCount;

				if (total > 4) {
					if (numberKid === document.activeElement) {
						numberKid.value = Math.max(0, 4 - adultCount);
					} else if (numberAdult === document.activeElement) {
						numberAdult.value = Math.max(1, 4 - kidCount);
					}
				}
			};

			numberAdult.addEventListener('input', validateTotal);
			numberKid.addEventListener('input', validateTotal);

			function showModal(message) {
				const modal = document.getElementById('errorModal');
				const modalMessage = document.getElementById('modalMessage');
				modalMessage.textContent = message; 
				modal.classList.remove('hidden'); 

				document.getElementById('closeModal').addEventListener('click', () => {
					modal.classList.add('hidden'); 
				});
				modal.addEventListener('click', (event) => {
					if (event.target === modal) {
						modal.classList.add('hidden');
					}
				});
			}
		});
	</script>
	{% endblock %}
{% endblock %}
