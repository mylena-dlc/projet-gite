name: CI/CD Workflow

on:
  push:
    branches:
      - develop
      - test
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: V√©rifier l'architecture du projet apr√®s checkout
        run: |
          echo "üìå Chemin actuel : $(pwd)"
          ls -lah

      - name: Attendre que MySQL soit pr√™t
        run: sleep 15

      - name: V√©rifier et corriger les permissions de /var/www
        run: |
          sudo chmod -R 777 /var/www    

      - name: V√©rifier et cr√©er .env manquant
        run: |
          echo "üìå Le projet est dans : /var/www"
          if [ ! -f "/var/www/.env" ]; then
            echo "‚ùå .env introuvable, cr√©ation en cours..."
            touch "/var/www/.env"
            echo "APP_ENV=test" > "/var/www/.env"
            echo "APP_SECRET=${{ secrets.APP_SECRET }}" >> "/var/www/.env"
            echo "DATABASE_URL=mysql://user:password@127.0.0.1:3306/test_db?serverVersion=8.0" >> "/var/www/.env"
            echo "MAILER_DSN=null://null" >> "/var/www/.env"
            echo "MESSENGER_TRANSPORT_DSN=doctrine://default" >> "/var/www/.env"
            echo "‚úÖ .env cr√©√© avec succ√®s."
          else
            echo "‚úÖ .env existe d√©j√†."
          fi
          ls -lah /var/www/.env

      - name: Supprimer .env.local pour √©viter les conflits
        run: |
          if [ -f "/var/www/.env.local" ]; then
            rm "/var/www/.env.local"
            echo "‚ùå .env.local supprim√© pour √©viter conflits"
          fi

      - name: Installer les d√©pendances PHP
        run: |
          docker compose exec -T php composer install --no-interaction --prefer-dist

      - name: V√©rifier si le dossier vendor existe apr√®s composer install
        run: |
          if [ ! -d "/var/www/vendor" ]; then
            echo "‚ùå ERREUR : Le dossier vendor/ est manquant apr√®s composer install !"
            exit 1
          fi

      - name: Donner les permissions au bin/console
        run: |
          chmod +x /var/www/bin/console

      - name: Cr√©er et mettre √† jour la base de donn√©es
        run: |
          docker compose exec -T php php bin/console doctrine:database:create --if-not-exists
          docker compose exec -T php php bin/console doctrine:migrations:migrate --no-interaction

      - name: Installer Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Installer les d√©pendances NPM
        run: |
          docker compose exec -T php npm install

      - name: Compiler les assets
        run: |
          docker compose exec -T php npm run build

      - name: Debugger les routes Symfony
        run: |
          docker compose exec -T php php bin/console debug:router

      - name: Lancer les tests PHPUnit
        run: |
          docker compose exec -T php php bin/phpunit

  merge-to-test:
    needs: test
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: develop

      - name: Merge develop into test
        run: |
          git checkout test
          git pull origin test --allow-unrelated-histories || true
          git merge develop --no-ff -m "Fusion de develop dans test"
          git push origin test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  merge-to-main:
    needs: merge-to-test
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Checkout test branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: test

      - name: Merge test into main
        run: |
          git checkout main
          git pull origin main --allow-unrelated-histories || true
          git merge test --no-ff -m "Fusion de test dans main"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    needs: merge-to-main
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Debug SSH connection
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            whoami
            hostname
            ls -lah /var/www/projet-gite

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /var/www/projet-gite
            git pull origin main
            sudo chown -R www-data:www-data /var/www
            sudo chmod -R 775 /var/www/var/cache /var/www/var/log
            sudo rm -rf /var/www/var/cache/prod
            php bin/console cache:clear --env=prod
            php bin/console cache:warmup --env=prod
            sudo systemctl restart apache2