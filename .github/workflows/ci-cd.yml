name: CI/CD Workflow

on:
  push:
    branches:
      - develop
      - test

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v3

      - name: 🔍 Vérifier arborescence après checkout
        run: |
          echo "📌 Chemin actuel : $(pwd)"
          echo "📂 Contenu de la racine :"
          ls -lah
          echo "📂 Contenu de app/ (si existe) :"
          ls -lah app || echo "❌ Dossier app/ introuvable"

      - name: 🔄 Définir PROJECT_DIR (corrigé)
        run: echo "PROJECT_DIR=app" >> $GITHUB_ENV

      - name: ✅ Vérifier l’existence de $PROJECT_DIR avant d’aller plus loin
        run: |
          if [ ! -d "$PROJECT_DIR" ]; then
            echo "❌ ERREUR : Le dossier $PROJECT_DIR n’existe pas !"
            exit 1
          fi

      - name: ⏳ Attendre MySQL
        run: sleep 15

      - name: 🛠 Vérifier et créer `.env` manquant
        run: |
          if [ ! -f "$PROJECT_DIR/.env" ]; then
            echo "❌ .env introuvable, création en cours..."
            touch "$PROJECT_DIR/.env"
            echo "APP_ENV=test" > "$PROJECT_DIR/.env"
            echo "APP_SECRET=${{ secrets.APP_SECRET }}" >> "$PROJECT_DIR/.env"
            echo "DATABASE_URL=mysql://user:password@127.0.0.1:3306/test_db?serverVersion=8.0" >> "$PROJECT_DIR/.env"
            echo "MAILER_DSN=null://null" >> "$PROJECT_DIR/.env"
            echo "MESSENGER_TRANSPORT_DSN=doctrine://default" >> "$PROJECT_DIR/.env"
            echo "✅ .env créé avec succès."
          fi

      - name: 🔍 Vérifier `vendor/` après `composer install`
        run: |
          if [ ! -d "$PROJECT_DIR/vendor" ]; then
            echo "❌ ERREUR : Le dossier vendor/ est manquant après composer install !"
            exit 1
          fi

      - name: 🔄 Donner les permissions à `bin/console`
        run: chmod +x "$PROJECT_DIR/bin/console"

      - name: 🛠 Installer les dépendances PHP
        run: |
          cd "$PROJECT_DIR" && composer install --no-interaction --prefer-dist
          cd "$PROJECT_DIR" && composer dump-autoload

      - name: 🛠 Créer et mettre à jour la base de données
        run: |
          mysql -h 127.0.0.1 -u root -proot -e "CREATE DATABASE IF NOT EXISTS test_db;"
          mysql -h 127.0.0.1 -u root -proot -e "GRANT ALL PRIVILEGES ON test_db.* TO 'user'@'%';"
          mysql -h 127.0.0.1 -u root -proot -e "FLUSH PRIVILEGES;"
          cd "$PROJECT_DIR" && php bin/console doctrine:database:create --if-not-exists
          cd "$PROJECT_DIR" && php bin/console doctrine:migrations:migrate --no-interaction

      - name: 🛠 Installer Node.js et dépendances NPM
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: 📦 Installer les dépendances NPM
        run: cd "$PROJECT_DIR" && npm install

      - name: 🏗️ Compiler les assets
        run: cd "$PROJECT_DIR" && npm run build

      - name: 🚦 Debug routes Symfony
        run: cd "$PROJECT_DIR" && php bin/console debug:router

      - name: 🧪 Lancer les tests PHPUnit
        run: cd "$PROJECT_DIR" && vendor/bin/phpunit