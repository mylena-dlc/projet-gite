name: CI/CD Workflow

on:
  push:
    branches:
      - develop
      - test
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: secret
          MYSQL_DATABASE: gite
          MYSQL_USER: symfony
          MYSQL_PASSWORD: symfony
        ports:
          - 3306/tcp
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🚀 Vérification de Docker Compose
        run: docker compose version

      - name: 🚀 Démarrer Docker Compose
        run: |
          MYSQL_PORT="" docker compose up -d --build
          sleep 20
          docker compose ps

      - name: 📜 Logs du conteneur PHP
        run: docker compose logs php --tail=50

      - name: 🛠️ Création du fichier .env
        run: |
          docker compose exec -T --user=root php bash -c "
            if [ -d /var/www/.env ]; then
              echo '🧹 Suppression du dossier .env'
              rm -rf /var/www/.env
            fi

            echo 'APP_ENV=prod' > /var/www/.env
            echo 'APP_SECRET=${{ secrets.APP_SECRET }}' >> /var/www/.env
            echo 'JWT_SECRET=${{ secrets.JWT_SECRET }}' >> /var/www/.env
            echo 'DATABASE_URL=mysql://symfony:symfony@database:3306/gite?serverVersion=8.0.32' >> /var/www/.env

            chown www-data:www-data /var/www/.env
            chmod 644 /var/www/.env
            echo '✅ .env prêt.'
          "

      - name: 🔧 Permissions et prérequis
        run: |
          docker compose exec -T --user=root php mkdir -p /var/www/vendor /var/www/var/cache /var/www/var/log
          docker compose exec -T --user=root php chown -R www-data:www-data /var/www
          docker compose exec -T --user=root php chmod -R 775 /var/www

      - name: 🛠️ Validation de composer.json
        run: docker compose exec -T php composer validate --no-check-lock

      - name: 📦 Installer les dépendances PHP
        run: docker compose exec -T --user=www-data php composer install --no-interaction --prefer-dist

      - name: 🚀 Symfony cache clear
        run: docker compose exec -T php php bin/console cache:clear --env=prod --no-warmup

      - name: 🗃️ Migrations Doctrine
        run: |
          docker compose exec -T php php bin/console doctrine:database:create --if-not-exists
          docker compose exec -T php php bin/console doctrine:migrations:migrate --no-interaction --allow-no-migration --all-or-nothing=false || true

      - name: 🧱 Installer & builder les assets
        run: docker compose exec -T php bash -c 'npm ci && npm run build'

      - name: 📦 Installer les assets importmap
        run: docker compose exec -T php php bin/console importmap:install

      - name: 🗃️ Migrations pour l'environnement de test
        run: |
          docker compose exec -T php php bin/console doctrine:database:create --env=test --if-not-exists
          docker compose exec -T php php bin/console doctrine:migrations:migrate --env=test --no-interaction

      - name: 🩹 Créer un faux logo dans le conteneur
        run: |
          docker compose exec -T --user=root php bash -c "
            mkdir -p /var/www/public/assets/img &&
            echo 'fake-image-content' > /var/www/public/assets/img/logo-gite-rain-du-pair.png &&
            chown www-data:www-data /var/www/public/assets/img/logo-gite-rain-du-pair.png
          "

      - name: ✅ Tests PHPUnit
        run: docker compose exec -T php bash -c 'APP_ENV=test php bin/phpunit'

  merge-develop-to-test:
    needs: tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: 📥 Checkout develop et test
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 🔀 Merge develop vers test
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          git checkout test
          git pull origin test --rebase
          git merge --no-ff develop -m "CI/CD: Merge develop vers test"
          git push https://x-access-token:${{ secrets.PERSONAL_TOKEN }}@github.com/${{ github.repository }} HEAD:test

        env:
          PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }}

  merge-test-to-main:
    needs: merge-develop-to-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/test'

    steps:
      - name: 📥 Checkout test et main
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 🔀 Merge test vers main
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          git checkout main
          git pull origin main --rebase
          git merge --no-ff test -m "CI/CD: Merge test vers main"
          git push https://x-access-token:${{ secrets.PERSONAL_TOKEN }}@github.com/${{ github.repository }} HEAD:main

        env:
          PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }}

  deploy:
    needs: merge-test-to-main
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout main
        uses: actions/checkout@v3
        with:
          ref: main

      - name: 🚀 Déploiement sur VPS
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /var/www/projet-gite
            git pull origin main
            sudo chown -R www-data:www-data /var/www
            sudo chmod -R 775 /var/www/var/cache /var/www/var/log
            php bin/console cache:clear --env=prod
            php bin/console cache:warmup --env=prod
            sudo systemctl restart apache2
