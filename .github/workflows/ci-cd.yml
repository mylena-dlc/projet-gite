name: CI/CD Workflow

on:
  push:
    branches:
      - develop
      - test
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: D√©finir UID et GID (CI/CD)
        run: |
          echo "UID=$(id -u)" >> $GITHUB_ENV
          echo "GID=$(id -g)" >> $GITHUB_ENV

      - name: V√©rifier la structure du projet apr√®s checkout
        run: |
          echo "üìå Chemin actuel : $(pwd)"
          ls -lah

      - name: Attendre que MySQL soit pr√™t
        run: sleep 15

      - name: D√©marrer les services Docker
        run: |
          docker compose up -d
          docker compose ps

      - name: V√©rifier et attendre que le conteneur PHP d√©marre
        run: |
          until docker compose exec -T php php -v &>/dev/null; do
            echo "‚è≥ En attente du d√©marrage du conteneur PHP..."
            sleep 5
          done
          echo "‚úÖ Conteneur PHP pr√™t !"

      - name: üßê V√©rification des fichiers avant toute action
        run: |
          docker compose exec -T php bash -c "
            echo 'üîç Contenu de /var/www'
            ls -lah /var/www || echo '‚ùå /var/www n existe pas'
            echo 'üîç Contenu de /var/www/var'
            ls -lah /var/www/var || echo '‚ùå /var/www/var n existe pas'
          "

      - name: üîß Forcer la cr√©ation des dossiers
        run: |
          docker compose exec -T php bash -c "
            echo 'üìÅ Cr√©ation manuelle des dossiers si absents...'
            mkdir -p /var/www/var/cache /var/www/var/log &&
            ls -lah /var/www/var
          "

      - name: üîß Appliquer les permissions apr√®s cr√©ation
        run: |
          docker compose exec -T php bash -c "
            echo '‚úÖ Application des permissions...'
            find /var/www/var -type d -exec chmod 775 {} \; &&
            find /var/www/var -type f -exec chmod 664 {} \;
          "

      - name: V√©rifier et cr√©er .env si manquant
        run: |
          docker compose exec -T php bash -c "
            if [ ! -f \"/var/www/.env\" ]; then
              echo \"‚ùå .env introuvable, cr√©ation en cours...\"
              echo \"APP_ENV=test\" > /var/www/.env
              echo \"APP_SECRET=${{ secrets.APP_SECRET }}\" >> /var/www/.env
              echo \"DATABASE_URL=mysql://user:password@127.0.0.1:3306/test_db?serverVersion=8.0\" >> /var/www/.env
              echo \"MAILER_DSN=null://null\" >> /var/www/.env
              echo \"‚úÖ .env cr√©√© avec succ√®s.\"
            else
              echo \"‚úÖ .env existe d√©j√†.\"
            fi
          "

      - name: Installer les d√©pendances PHP
        run: |
          docker compose exec -T php composer install --no-interaction --prefer-dist

      - name: Nettoyer et recompiler le cache Symfony
        run: |
          docker compose exec -T php php bin/console cache:clear --no-warmup

      - name: Cr√©er et mettre √† jour la base de donn√©es
        run: |
          docker compose exec -T php php bin/console doctrine:database:create --if-not-exists
          docker compose exec -T php php bin/console doctrine:migrations:migrate --no-interaction

      - name: Lancer les tests PHPUnit
        run: |
          docker compose exec -T php php bin/phpunit

  merge-to-test:
    needs: test
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: develop

      - name: Merge develop into test
        run: |
          git checkout test
          git pull origin test --allow-unrelated-histories || true
          git merge develop --no-ff -m "Fusion de develop dans test"
          git push origin test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  merge-to-main:
    needs: merge-to-test
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Checkout test branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: test

      - name: Merge test into main
        run: |
          git checkout main
          git pull origin main --allow-unrelated-histories || true
          git merge test --no-ff -m "Fusion de test dans main"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    needs: merge-to-main
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /var/www/projet-gite
            git pull origin main
            sudo chown -R www-data:www-data /var/www
            sudo chmod -R 775 /var/www/var/cache /var/www/var/log
            sudo rm -rf /var/www/var/cache/prod
            php bin/console cache:clear --env=prod
            php bin/console cache:warmup --env=prod
            sudo systemctl restart apache2
