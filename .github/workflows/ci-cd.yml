name: CI/CD Workflow

on:
  push:
    branches:
      - develop
      - test
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: D√©finir UID et GID (CI/CD)
        run: |
          echo "UID=$(id -u)" >> $GITHUB_ENV
          echo "GID=$(id -g)" >> $GITHUB_ENV



      - name: V√©rifier la structure du projet apr√®s checkout
        run: |
          echo "üìå Chemin actuel : $(pwd)"
          ls -lah

      - name: Attendre que MySQL soit pr√™t
        run: sleep 15

      - name: D√©marrer les services Docker
        run: |
          docker compose up -d
          docker compose ps

      - name: V√©rifier et attendre que le conteneur PHP d√©marre
        run: |
          until docker compose exec -T php php -v &>/dev/null; do
            echo "‚è≥ En attente du d√©marrage du conteneur PHP..."
            sleep 5
          done
          echo "‚úÖ Conteneur PHP pr√™t !"


      - name: üîç Debug Permissions dans CI/CD
        run: |
          docker compose exec -T php bash -c "
            echo 'üîç Utilisateur actuel:' 
            whoami
            echo 'üîç UID/GID actuel:' 
            id
            echo 'üîç Permissions sur /var/www'
            ls -ld /var/www || echo '‚ö†Ô∏è /var/www introuvable'
            echo 'üîç Permissions sur /var/www/var'
            ls -ld /var/www/var || echo '‚ö†Ô∏è /var/www/var introuvable'
          "
 
      - name: Forcer les permissions sur /var/www
        run: |
          docker compose exec -T php bash -c "
            echo 'üîß Correction des permissions sur /var/www'
            sudo chown -R www-data:www-data /var/www || echo '‚ö†Ô∏è √âchec de chown'
            sudo chmod -R 775 /var/www || echo '‚ö†Ô∏è √âchec de chmod'
          "

      - name: Cr√©er les dossiers de cache et log si manquants
        run: |
          docker compose exec -T php bash -c "
            mkdir -p /var/www/var/cache /var/www/var/log &&
            chown -R www-data:www-data /var/www/var &&
            chmod -R 775 /var/www/var
          "

      - name: V√©rifier et cr√©er .env si manquant
        run: |
          docker compose exec -T php bash -c "
            if [ ! -f "/var/www/.env" ]; then
              echo "‚ùå .env introuvable, cr√©ation en cours..."
              echo "APP_ENV=test" > /var/www/.env
              echo "APP_SECRET=${{ secrets.APP_SECRET }}" >> /var/www/.env
              echo "DATABASE_URL=mysql://user:password@127.0.0.1:3306/test_db?serverVersion=8.0" >> /var/www/.env
              echo "MAILER_DSN=null://null" >> /var/www/.env
              echo "‚úÖ .env cr√©√© avec succ√®s."
            else
              echo "‚úÖ .env existe d√©j√†."
            fi
          "

      - name: Installer les d√©pendances PHP
        run: |
          docker compose exec -T php composer install --no-interaction --prefer-dist

      - name: V√©rifier si le dossier vendor existe apr√®s composer install
        run: |
          docker compose exec -T php ls -ld /var/www/vendor
          if [ ! -d "/var/www/vendor" ]; then
            echo "‚ùå ERREUR : Le dossier vendor/ est manquant apr√®s composer install !"
            exit 1
          fi

      - name: Donner les permissions au bin/console
        run: |
          docker compose exec -T php chmod +x /var/www/bin/console

      - name: Nettoyer et recompiler le cache Symfony
        run: |
          docker compose exec -T php php bin/console cache:clear --no-warmup

      - name: Cr√©er et mettre √† jour la base de donn√©es
        run: |
          docker compose exec -T php php bin/console doctrine:database:create --if-not-exists
          docker compose exec -T php php bin/console doctrine:migrations:migrate --no-interaction

      - name: Installer Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Installer les d√©pendances NPM
        run: |
          docker compose exec -T php npm install

      - name: Compiler les assets
        run: |
          docker compose exec -T php npm run build

      - name: Debugger les routes Symfony
        run: |
          docker compose exec -T php php bin/console debug:router

      - name: Lancer les tests PHPUnit
        run: |
          docker compose exec -T php php bin/phpunit
