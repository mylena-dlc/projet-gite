name: CI/CD Workflow

on:
  push:
    branches:
      - develop
      - test

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: 📥 Checkout du code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: 📂 Vérification de la structure du projet
        run: |
          echo "📌 Chemin actuel : $(pwd)"
          echo "📂 Contenu de la racine :"
          ls -lah
          echo "📂 Contenu de app/ :"
          ls -lah app || echo "❌ Le dossier app/ n'existe pas"

      - name: 🕵️ Forcer `PROJECT_DIR=app`
        run: echo "PROJECT_DIR=app" >> $GITHUB_ENV

      - name: 📝 Vérifier et créer `.env` avant `composer install`
        run: |
          if [ ! -f "${{ env.PROJECT_DIR }}/.env" ]; then
            echo "❌ .env introuvable, création en cours..."
            touch ${{ env.PROJECT_DIR }}/.env
            echo "APP_ENV=test" > ${{ env.PROJECT_DIR }}/.env
            echo "APP_SECRET=${{ secrets.APP_SECRET }}" >> ${{ env.PROJECT_DIR }}/.env
            echo "DATABASE_URL=mysql://user:password@127.0.0.1:3306/test_db?serverVersion=8.0" >> ${{ env.PROJECT_DIR }}/.env
            echo "MAILER_DSN=null://null" >> ${{ env.PROJECT_DIR }}/.env
            echo "MESSENGER_TRANSPORT_DSN=doctrine://default" >> ${{ env.PROJECT_DIR }}/.env
            echo "✅ .env créé avec succès."
          else
            echo "✅ .env existe déjà."
          fi
          ls -lah ${{ env.PROJECT_DIR }}/.env

      - name: 💾 Installer les dépendances PHP (composer)
        run: |
          cd ${{ env.PROJECT_DIR }}
          composer install --no-interaction --prefer-dist --no-progress || (echo "❌ ERREUR : Composer install a échoué !" && exit 1)
          ls -lah vendor || echo "❌ Le dossier vendor/ est manquant !"

      - name: 🧐 Vérifier si `vendor/` est bien installé
        run: |
          if [ ! -d "${{ env.PROJECT_DIR }}/vendor" ]; then
            echo "❌ ERREUR : Le dossier vendor/ est manquant après composer install !"
            exit 1
          fi

      - name: 🔧 Corriger les permissions de `bin/console`
        run: chmod +x ${{ env.PROJECT_DIR }}/bin/console

      - name: 🎯 Tester `bin/console`
        run: |
          php ${{ env.PROJECT_DIR }}/bin/console --version || echo "❌ Erreur lors de l'exécution de bin/console"

      - name: 🕒 Attendre MySQL
        run: sleep 15

      - name: 🏗️ Supprimer et recréer la base de données
        run: |
          php app/bin/console doctrine:database:drop --force --if-exists
          php app/bin/console doctrine:database:create --if-not-exists

      - name: 🔄 Nettoyer les migrations et recréer le schéma
        run: |
          php app/bin/console doctrine:migrations:migrate --no-interaction --allow-no-migration || echo "⚠️ Aucune migration à appliquer."

      - name: 📨 Configurer Messenger
        run: |
          cd ${{ env.PROJECT_DIR }}
          php bin/console messenger:setup-transports --no-interaction

      - name: 🔧 Installer Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: 📦 Installer les dépendances NPM
        run: |
          cd ${{ env.PROJECT_DIR }}
          npm install

      - name: 🎨 Construire les assets
        run: |
          cd ${{ env.PROJECT_DIR }}
          npm run build

      - name: 🗺️ Vérifier les routes
        run: |
          cd ${{ env.PROJECT_DIR }}
          php bin/console debug:router

      - name: ✅ Exécuter les tests PHPUnit
        run: |
          cd ${{ env.PROJECT_DIR }}
          vendor/bin/phpunit