name: CI/CD Workflow

on:
  push:
    branches:
      - develop
      - test

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout du code avec profondeur compl√®te
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: V√©rifier l‚Äôarborescence apr√®s le checkout
        run: |
          echo "üìÇ Contenu du projet apr√®s checkout"
          ls -lah

      - name: V√©rifier le contenu de app/
        run: |
          echo "üìÇ Contenu du dossier app/"
          ls -lah app || echo "‚ùå Le dossier app/ n'existe pas"

      - name: V√©rifier le dossier courant et `bin/console`
        run: |
          echo "üìå Chemin actuel :"
          pwd
          echo "üìÇ Contenu de bin/"
          ls -lah app/bin
          echo "üîß Test ex√©cution `bin/console`"
          php app/bin/console --version || echo "‚ùå Erreur lors de l'ex√©cution de bin/console"

      - name: Corriger les permissions de `bin/console`
        run: chmod +x app/bin/console

      - name: D√©tection du dossier du projet
        run: |
          if [ -d "app" ]; then echo "PROJECT_DIR=app" >> $GITHUB_ENV; else echo "PROJECT_DIR=." >> $GITHUB_ENV; fi
          echo "üìå Le projet est dans : ${{ env.PROJECT_DIR }}"

      - name: Wait for MySQL
        run: sleep 15  # Attente pour √©viter les erreurs de connexion

      - name: Ensure .env file exists
        run: |
          touch ${{ env.PROJECT_DIR }}/.env
          echo "APP_ENV=test" > ${{ env.PROJECT_DIR }}/.env
          echo "APP_SECRET=${{ secrets.APP_SECRET }}" >> ${{ env.PROJECT_DIR }}/.env
          echo "DATABASE_URL=mysql://user:password@127.0.0.1:3306/test_db?serverVersion=8.0" >> ${{ env.PROJECT_DIR }}/.env
          echo "MAILER_DSN=null://null" >> ${{ env.PROJECT_DIR }}/.env
          echo "MESSENGER_TRANSPORT_DSN=doctrine://default" >> ${{ env.PROJECT_DIR }}/.env

      - name: V√©rification du fichier .env
        run: |
          echo "üîç V√©rification du fichier .env"
          ls -lah ${{ env.PROJECT_DIR }}
          cat ${{ env.PROJECT_DIR }}/.env

      - name: Installer les d√©pendances PHP (composer)
        run: |
          cd ${{ env.PROJECT_DIR }} && composer install --no-interaction --prefer-dist --no-progress
          ls -lah ${{ env.PROJECT_DIR }}/vendor || echo "‚ùå Le dossier vendor/ est manquant !"

      - name: V√©rifier si les vendors sont bien install√©s
        run: |
          if [ ! -d "${{ env.PROJECT_DIR }}/vendor" ]; then
            echo "‚ùå ERREUR : Le dossier vendor/ est manquant apr√®s composer install !"
            exit 1
          fi

      - name: Create MySQL Database
        run: |
          mysql -h 127.0.0.1 -u root -proot -e "CREATE DATABASE IF NOT EXISTS test_db;"
          mysql -h 127.0.0.1 -u root -proot -e "GRANT ALL PRIVILEGES ON test_db.* TO 'user'@'%';"
          mysql -h 127.0.0.1 -u root -proot -e "FLUSH PRIVILEGES;"

      - name: Drop & Create Database Schema
        run: |
          cd ${{ env.PROJECT_DIR }} && php bin/console doctrine:database:drop --force --if-exists
          cd ${{ env.PROJECT_DIR }} && php bin/console doctrine:database:create --if-not-exists
          cd ${{ env.PROJECT_DIR }} && php bin/console doctrine:schema:create

      - name: Debug Doctrine Schema
        run: |
          cd ${{ env.PROJECT_DIR }} && php bin/console doctrine:schema:validate --skip-sync

      - name: Run database migrations
        run: |
          cd ${{ env.PROJECT_DIR }} && php bin/console doctrine:migrations:migrate --no-interaction

      - name: Run Messenger schema migration
        run: |
          cd ${{ env.PROJECT_DIR }} && php bin/console messenger:setup-transports --no-interaction

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install NPM dependencies
        run: |
          cd ${{ env.PROJECT_DIR }} && npm install

      - name: Build assets
        run: |
          cd ${{ env.PROJECT_DIR }} && npm run build

      - name: Debug routes
        run: |
          cd ${{ env.PROJECT_DIR }} && php bin/console debug:router

      - name: Run tests
        run: |
          cd ${{ env.PROJECT_DIR }} && vendor/bin/phpunit