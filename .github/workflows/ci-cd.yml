name: CI/CD Workflow

on:
  push:
    branches:
      - develop
      - test

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Update Docker
      - name: Update Docker
        run: |
          sudo apt-get update
          sudo apt-get install --only-upgrade docker-ce docker-ce-cli containerd.io

      # Check Docker version
      - name: Check Docker version
        run: docker --version

      # Verify folder structure after checkout
      - name: Debug Folder Structure
        run: |
          echo "üìå Chemin actuel : $(pwd)"
          ls -lah

      # Wait for MySQL to be ready
      - name: Wait for MySQL
        run: sleep 15

      # Ensure .env file exists and is correctly configured
      - name: Ensure .env file exists
        run: |
          if [ ! -f "$PROJECT_DIR/.env" ]; then
            echo "‚ùå .env introuvable, cr√©ation en cours..."
            touch "$PROJECT_DIR/.env"
            echo "APP_ENV=test" > "$PROJECT_DIR/.env"
            echo "APP_SECRET=${{ secrets.APP_SECRET }}" >> "$PROJECT_DIR/.env"
            echo "DATABASE_URL=mysql://user:password@127.0.0.1:3306/test_db?serverVersion=8.0" >> "$PROJECT_DIR/.env"
            echo "MAILER_DSN=null://null" >> "$PROJECT_DIR/.env"
            echo "MESSENGER_TRANSPORT_DSN=doctrine://default" >> "$PROJECT_DIR/.env"
            echo "‚úÖ .env cr√©√© avec succ√®s."
          else
            echo "‚úÖ .env existe d√©j√†."
          fi
          ls -lah $PROJECT_DIR/.env

      # Install PHP dependencies
      - name: Install PHP dependencies
        run: |
          docker-compose exec php composer install --no-interaction --prefer-dist

      # Verify vendor directory
      - name: Verify vendor directory
        run: |
          if [ ! -d "$PROJECT_DIR/vendor" ]; then
            echo "‚ùå ERREUR : Le dossier vendor/ est manquant apr√®s composer install !"
            exit 1
          fi

      # Give permissions to bin/console
      - name: Give permissions to bin/console
        run: chmod +x $PROJECT_DIR/bin/console

      # Create and update the database
      - name: Create and update the database
        run: |
          mysql -h 127.0.0.1 -u root -proot -e "CREATE DATABASE IF NOT EXISTS test_db;"
          mysql -h 127.0.0.1 -u root -proot -e "GRANT ALL PRIVILEGES ON test_db.* TO 'user'@'%';"
          mysql -h 127.0.0.1 -u root -proot -e "FLUSH PRIVILEGES;"
          cd $PROJECT_DIR && php bin/console doctrine:database:create --if-not-exists
          cd $PROJECT_DIR && php bin/console doctrine:migrations:migrate --no-interaction

      # Install Node.js
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Install NPM dependencies
      - name: Install NPM dependencies
        run: |
          cd $PROJECT_DIR && npm install

      # Build assets
      - name: Build assets
        run: |
          cd $PROJECT_DIR && npm run build

      # Debug Symfony routes
      - name: Debug routes
        run: |
          cd $PROJECT_DIR && php bin/console debug:router

      # Run PHPUnit tests
      - name: Run tests
        run: |
          cd $PROJECT_DIR && vendor/bin/phpunit

  merge-to-test:
    needs: test
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: develop

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Merge develop into test
        run: |
          git checkout test
          git pull origin test --allow-unrelated-histories || true
          git merge develop --no-ff -m "Fusion de develop dans test"
          git push origin test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-on-test-branch:
    needs: merge-to-test
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Checkout test branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: test

      - name: Run CI tests again
        run: echo "Re-lancement des tests sur la branche test"

  merge-to-main:
    needs: test-on-test-branch
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Checkout test branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: test

      - name: Merge test into main
        run: |
          git checkout main
          git pull origin main --allow-unrelated-histories || true
          git merge test --no-ff -m "Fusion de test dans main"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    needs: merge-to-main
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Debug SSH connection
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            whoami
            hostname
            ls -lah /var/www/projet-gite

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /var/www/projet-gite
            git pull origin main
            sudo chown -R www-data:www-data app/var
            sudo chmod -R 775 app/var/cache app/var/log
            sudo rm -rf app/var/cache/prod
            php bin/console cache:clear --env=prod
            php bin/console cache:warmup --env=prod
            sudo systemctl restart apache2