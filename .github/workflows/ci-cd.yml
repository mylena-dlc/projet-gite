name: CI/CD Workflow

on:
  push:
    branches:
      - develop
      - test
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Installer Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose-plugin

      - name: Vérifier que Docker Compose fonctionne
        run: docker compose version

      - name: Vérifier et démarrer les conteneurs
        run: docker compose up -d

      - name: Vérifier et attendre que le conteneur PHP démarre
        run: |
          until docker compose exec -T php php -v &>/dev/null; do
            echo "⏳ En attente de PHP..."
            sleep 2
          done
          echo "✅ Conteneur PHP prêt !"

      - name: Vérifier et corriger les permissions de /var/www
        run: docker compose exec -T php bash -c "chmod -R 777 /var/www"

      - name: Vérifier et créer .env manquant
        run: |
          docker compose exec -T php bash -c "
            if [ ! -f '/var/www/.env' ]; then
              echo 'APP_ENV=test' > /var/www/.env
              echo 'APP_SECRET=${{ secrets.APP_SECRET }}' >> /var/www/.env
              echo 'DATABASE_URL=mysql://user:password@127.0.0.1:3306/test_db?serverVersion=8.0' >> /var/www/.env
              echo 'MAILER_DSN=null://null' >> /var/www/.env
            fi
            chown www-data:www-data /var/www/.env && chmod 660 /var/www/.env
          "

      - name: Installer les dépendances PHP
        run: docker compose exec -T php composer install --no-interaction --prefer-dist

      - name: Vérifier si le dossier vendor existe après composer install
        run: |
          docker compose exec -T php bash -c "[ -d '/var/www/vendor' ] || (echo '❌ ERREUR : Le dossier vendor/ est manquant !' && exit 1)"

      - name: Lancer les tests PHPUnit
        run: docker compose exec -T php php bin/phpunit

  merge-to-test:
    needs: test
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: develop

      - name: Merge develop into test
        run: |
          git checkout test
          git pull origin test --allow-unrelated-histories || true
          git merge develop --no-ff -m "Fusion de develop dans test"
          git push origin test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  merge-to-main:
    needs: merge-to-test
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Checkout test branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: test

      - name: Merge test into main
        run: |
          git checkout main
          git pull origin main --allow-unrelated-histories || true
          git merge test --no-ff -m "Fusion de test dans main"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    needs: merge-to-main
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Debug SSH connection
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            whoami
            hostname
            ls -lah /var/www/projet-gite

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /var/www/projet-gite
            git pull origin main
            sudo chown -R www-data:www-data /var/www
            sudo chmod -R 775 /var/www/var/cache /var/www/var/log
            sudo rm -rf /var/www/var/cache/prod
            php bin/console cache:clear --env=prod
            php bin/console cache:warmup --env=prod
            sudo systemctl restart apache2
