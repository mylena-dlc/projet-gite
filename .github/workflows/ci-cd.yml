name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
      - test

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: secret
          MYSQL_DATABASE: gite
          MYSQL_USER: symfony
          MYSQL_PASSWORD: symfony
        ports:
          - 3307:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # V√©rification du code source
      - name: Checkout code
        uses: actions/checkout@v3

      # V√©rification de l'architecture du projet
      - name: Verify folder structure
        run: |
          echo "üìå Current directory: $(pwd)"
          ls -lah

      # Attendre que MySQL soit pr√™t
      - name: Wait for MySQL
        run: sleep 15  # Attendre que MySQL soit pr√™t

      # V√©rifier et cr√©er le fichier .env
      - name: Ensure .env file exists
        run: |
          if [ ! -f "app/.env" ]; then
            echo "‚ùå .env file missing, creating it..."
            touch app/.env
            echo "APP_ENV=test" >> app/.env
            echo "DATABASE_URL=mysql://symfony:symfony@database:3306/gite" >> app/.env
            echo "‚úÖ .env created successfully"
          fi
          ls -lah app/.env  # V√©rifier le fichier .env

      # Installer les d√©pendances PHP
      - name: Install PHP dependencies
        run: docker-compose exec php composer install --no-interaction --prefer-dist

      # Cr√©er la base de donn√©es et effectuer les migrations
      - name: Create MySQL Database and run migrations
        run: |
          docker-compose exec php php bin/console doctrine:database:create --if-not-exists
          docker-compose exec php php bin/console doctrine:migrations:migrate --no-interaction

      # Lancer les tests PHPUnit
      - name: Run tests
        run: docker-compose exec php vendor/bin/phpunit

  merge-to-test:
    needs: test
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: develop

      - name: Merge develop into test
        run: |
          git checkout test
          git merge develop --no-ff -m "Merge develop into test"
          git push origin test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-on-test-branch:
    needs: merge-to-test
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Checkout test branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: test

      - name: Run CI tests again
        run: echo "Re-running tests on the test branch"

  merge-to-main:
    needs: test-on-test-branch
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Checkout test branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: test

      - name: Merge test into main
        run: |
          git checkout main
          git merge test --no-ff -m "Merge test into main"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    needs: merge-to-main
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Debug SSH connection
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            whoami
            hostname
            ls -lah /var/www/projet-gite

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /var/www/projet-gite
            git pull origin main
            sudo chown -R www-data:www-data app/var
            sudo chmod -R 775 app/var/cache app/var/log
            sudo rm -rf app/var/cache/prod
            php bin/console cache:clear --env=prod
            php bin/console cache:warmup --env=prod
            sudo systemctl restart apache2